import React, { Component } from 'react'
import Header from "./Header"
import axios from "axios";
import './App.css'
import TinderCard from 'react-tinder-card'
import { Container, Label, Button, Accordion, Icon } from "semantic-ui-react"
import { Link } from "react-router-dom"
import "./App.css"
import { connect } from "react-redux";
import { withRouter } from "react-router-dom";
import * as messageActions from "./store/actions/message";
import Pikachu from './components/layout/pikachu';
import Age from './age';
import { Badge } from 'antd';
class Sg extends Component {
    state = {
        error: null,
        data: [],
        lastDirection: [],
        data2: [],
        data3: [],
        data4: [],
        data5: [],
        data6: [],
        data9: [],
        data7: [],
        data8: [],
        datax: [],
        datac: [],
        datag: [],
        chats: [],
        req: [],
        dx: [],
        b: [],
        ids: '',
        pre: '',
        frd: [],
        dal: [],
        da: [],
    };


    componentDidMount() {

        axios("https://norsky.shop/cha/user/")
            .then(res => {
                this.setState({ data3: res.data.filter(({ username }) => username === localStorage.getItem("username")) });
                this.setState({ data4: res.data.filter(({ username }) => username === localStorage.getItem("friend")) });
                this.setState({ datax: res.data.filter(({ username }) => username === localStorage.getItem("reques")) });
                this.state.data3.map((f) => {
                    this.setState({ ids: f.id })
                    localStorage.setItem("sd", f.id);
                })
            })

        axios("https://norsky.shop/profile/profile/")
            .then(res => {
                this.setState({ dx: res.data.filter(({ parent_user }) => parent_user === localStorage.getItem("username")) });
                this.setState({ data: res.data.filter(({ Age, parent_user }) => Age <= localStorage.getItem("ages") && parent_user != localStorage.getItem("username") && parent_user != localStorage.getItem("gh")) });
                this.setState({ data: this.state.data.filter(({ parent_user }) => parent_user = !this.state.b.includes(parent_user)) });
                this.setState({ data: this.state.data.filter(({ parent_user }) => parent_user = !this.state.frd.includes(parent_user)) });


            })
            .catch(err => {
                this.setState({ error: err });
            });

        axios("https://norsky.shop/profile/age/")
            .then(res => {
                this.setState({ datag: res.data.filter(({ username }) => username === localStorage.getItem("username")) });

            })
            .catch(err => {
                this.setState({ error: err });
            });



        axios("https://norsky.shop/profile/friendrequests/")
            .then(res => {
                this.setState({ data2: res.data });
                this.setState({ req: this.state.data2.filter(({ from_user }) => from_user === localStorage.getItem("username")) })
                this.state.req.map((d) => {
                    this.state.b.push(d.to_user)
                });



            })
            .catch(err => {
                this.setState({ error: err });
            });


        axios("https://norsky.shop/cha/")
            .then(res => {

                this.setState({ data9: res.data.filter(({ participants }) => participants[1] === localStorage.getItem("username")) });
                this.setState({ data8: res.data.filter(({ participants }) => participants[0] === localStorage.getItem("username")) });


                this.state.data9.map((f) => {
                    this.state.frd.push(f.participants[0])

                })
                this.state.data8.map((f) => {
                    this.state.frd.push(f.participants[1])

                })


            })
            .catch(err => {
                this.setState({ error: err });
            });


        axios.get(`https://norsky.shop/cha/?username=${localStorage.getItem("username")}`)
            .then(res => {
                console.log(res.data);
                this.setState({
                    chats: res.data
                });
            });







    }
    componentWillMount() {
        axios("https://norsky.shop/cha/contact/")
            .then(res => {
                this.setState({ data5: res.data.filter(({ user }) => user === JSON.parse(localStorage.getItem("ids2"))) });
                this.setState({ data6: res.data.filter(({ user }) => user === JSON.parse(localStorage.getItem("sd"))) });
                this.setState({ datac: res.data.filter(({ user }) => user === JSON.parse(localStorage.getItem("idsre"))) });
                this.setState({ pre: this.state.data6.length })

            })
            .catch(err => {
                this.setState({ error: err });
            });

    }



    sendrequest = (name) => {
        console.log(this.state.lastDirection);
        if (this.state.lastDirection == "up" || this.state.lastDirection == "right") {
            if (JSON.parse(localStorage.getItem("pre")) == 0) {


                let form_dat = new FormData();
                form_dat.append('user', this.state.ids);


                let url2 = 'https://norsky.shop/cha/contact/';
                axios.post(url2, form_dat)
            }

            let form_data = new FormData();
            form_data.append('from_user', localStorage.getItem("username"));
            form_data.append('to_user', name);


            let url = 'https://norsky.shop/profile/friendrequests/';
            axios.post(url, form_data).then(res => {
                this.setState({ pre: 1 })
            }
            )


        }
    }




    swiped = (direction, nameToDelete) => {

        console.log('removing: ' + nameToDelete)
        this.setState({ lastDirection: direction })
        this.sendrequest(nameToDelete);
        localStorage.setItem("reques", nameToDelete)
    }

    outOfFrame = (name) => {
        console.log(name + ' left the screen!')
    }

    addfriend = (id) => {
        localStorage.setItem("idf", id);

        if (this.state.data6.length == 0) {
            let idf = JSON.parse(localStorage.getItem("idf"))
            let form_dat = new FormData();
            form_dat.append('user', localStorage.getItem("sd"));



            let url = 'https://norsky.shop/cha/contact/';
            axios.post(url, form_dat)
            localStorage.setItem("stat", "oka")
            const cobined = [localStorage.getItem("friend"), localStorage.getItem("username")];
            console.log(cobined);
            axios.defaults.xsrfHeaderName = "X-CSRFTOKEN";
            axios.defaults.xsrfCookieName = "csrftoken";
            axios.defaults.headers = {
                "Content-Type": "application/json",
            }

            axios.post("https://norsky.shop/cha/create/", {
                messages: [],
                participants: [localStorage.getItem("friend"), localStorage.getItem("username")]
            })
                .then(res => {
                    this.props.history.push(`/chat`);
                    this.props.getUserChats(localStorage.getItem("username"), localStorage.getItem("token"));
                    localStorage.removeItem("stat")
                    localStorage.setItem("friendz", "yes")

                })
                .catch(err => {
                    console.error(err);
                    this.setState({
                        error: err
                    });
                });

            let r = 'https://norsky.shop/profile/friendrequests/'
            axios.delete(r + idf)


        }
        else {
            let idf = JSON.parse(localStorage.getItem("idf"))

            const comin = [localStorage.getItem("ids3"), localStorage.getItem("ids4")];
            let fr_dat = new FormData();
            fr_dat.append('user', localStorage.getItem("sd"));
            fr_dat.append('friends', comin);


            let uld = 'https://norsky.shop/cha/contact/';
            axios.post(uld, fr_dat)
            const cobined = [localStorage.getItem("friend"), localStorage.getItem("username")];
            console.log(cobined);
            axios.defaults.xsrfHeaderName = "X-CSRFTOKEN";
            axios.defaults.xsrfCookieName = "csrftoken";
            axios.defaults.headers = {
                "Content-Type": "application/json",
            }

            axios.post("https://norsky.shop/cha/create/", {
                messages: [],
                participants: [localStorage.getItem("friend"), localStorage.getItem("username")]
            })
                .then(res => {
                    this.props.history.push(`/chat`);
                    this.props.getUserChats(localStorage.getItem("username"), localStorage.getItem("token"));
                    localStorage.removeItem("stat")
                    localStorage.setItem("friendz", "yes")


                })
                .catch(err => {
                    console.error(err);
                    this.setState({
                        error: err
                    });
                });


        }

        let rl = 'https://norsky.shop/profile/friendrequests/'
        axios.delete(rl + id + "/")

    }
    confirm = (id) => {
        const combin = [localStorage.getItem("ids3"), localStorage.getItem("ids4")];
        let for_dat = new FormData();
        for_dat.append('user', localStorage.getItem("ids"));
        for_dat.append('friends', combin);


        let urld = 'https://norsky.shop/cha/contact/';
        axios.post(urld, for_dat)
        const combined = [localStorage.getItem("friend"), localStorage.getItem("username")];
        console.log(combined);
        axios.defaults.xsrfHeaderName = "X-CSRFTOKEN";
        axios.defaults.xsrfCookieName = "csrftoken";
        axios.defaults.headers = {
            "Content-Type": "application/json",
        }

        axios.post("https://norsky.shop/cha/create/", {
            messages: [],
            participants: [localStorage.getItem("friend"), localStorage.getItem("username")]
        })
            .then(res => {
                this.props.history.push(`/chat`);
                this.props.getUserChats(localStorage.getItem("username"), localStorage.getItem("token"));
                localStorage.removeItem("stat")
                localStorage.setItem("friendz", "yes")
            })
            .catch(err => {
                console.error(err);
                this.setState({
                    error: err
                });
            });



    }
    handleClick = (e, titleProps) => {
        const { index } = titleProps
        const { activeIndex } = this.state
        const newIndex = activeIndex === index ? -1 : index

        this.setState({ activeIndex: newIndex })
    }


    render() {
        const { activeIndex } = this.state
        const { dx, da, b, lat1, dal, frd, pre, ids, data, req, error, datafr, data2, data3, data4, data6, chats, data5, data9, data8, datax, datac, datag } = this.state;
        var v = [];

        dx.map((fg) => {
            localStorage.setItem("location", fg.location)
        })


        chats.map((c) => {
            if (c.participants[0] === localStorage.getItem("username")) { localStorage.setItem("persons", JSON.stringify(c.participants[1])) } else {
                localStorage.setItem("person", JSON.stringify(c.participants[0]))
            }
        })



        v = data2.filter(({ to_user }) => to_user === localStorage.getItem("username"));
        const APIKEY = 'c2514daffcbd261b8f9940d30fc01d0a'
        axios(`https://api.openweathermap.org/data/2.5/weather?q=${localStorage.getItem("location")}&APPID=${APIKEY}`)
            .then(res => {


                localStorage.setItem("lat1", res.data.coord.lat)
                localStorage.setItem("long1", res.data.coord.lon)
            })



        data4.map((fg) => {
            localStorage.setItem("ids2", fg.id)
        })

        datax.map((fg) => {
            localStorage.setItem("idsre", fg.id)
        })

        data5.map((fgc) => {
            localStorage.setItem("ids3", fgc.id)
        })

        data6.map((fgc) => {
            localStorage.setItem("ids4", fgc.id)
        })
        datag.map((fgc) => {
            localStorage.setItem("ages", fgc.Age)
        })

        v.map((character) => {
            localStorage.setItem("friend", character.from_user)
        })
        let f = []
        f = data.slice(0, Math.round(data.length / 3));
        let g = []
        g = data.slice(Math.round(data.length / 3), Math.round(2 * (data.length) / 3));
        let r = []
        r = data.slice(Math.round(2 * (data.length) / 3), data.length);
        console.log(data6.length);
        localStorage.setItem("pre", pre.length)
        let gf = []
        axios("https://norsky.shop/cha/contact/")
            .then(res => {

                this.setState({
                    pre: res.data.filter(({ user }) => user === JSON.parse(localStorage.getItem("sd")))
                });
            })


        console.log(pre.length)



        return (
            <div>
                <Pikachu>
                </Pikachu>
                <Accordion>
                    <Accordion.Title
                        active={activeIndex === 0}
                        index={0}
                        onClick={this.handleClick}
                    >
                        <Icon color="white" name='dropdown' />
                        <h5 color="violet"><Badge count={v.length} />Friend Requests</h5>

                    </Accordion.Title>
                    <Accordion.Content active={activeIndex === 0}>
                        <h5 color="white">

                            {v.map((character) =>
                                <h6 key={character.id}><b> You've Friend Request from {character.from_user}<br></br>  <Button onClick={() => this.addfriend(character.id)}>Add Friend</Button></b></h6>
                            )}

                        </h5>
                    </Accordion.Content>
                </Accordion>

                <br></br>
                <br></br>

                <center>{this.state.lastDirection === "right" ? <h2 className='infoText'>You swiped for friend</h2> : this.state.lastDirection === "up" ? <h2 className='infoText'>You swiped for Date :)</h2> : <h2>Swipe right for Friend  Up for date and left for reject..!</h2>}</center>

                <Header />
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <link href='https://fonts.googleapis.com/css?family=Damion&display=swap' rel='stylesheet' />
                <link href='https://fonts.googleapis.com/css?family=Alatsi&display=swap' rel='stylesheet' />




                <div className='cardContainer'>
                    {r.map((character) =>


                        <TinderCard className='swipe' key={character.id} onSwipe={(dir) => this.swiped(dir, character.parent_user)} onCardLeftScreen={() => this.outOfFrame(character.parent_user)}>
                            <div onDoubleClick={() =>
                                this.props.history.push(`/main/products/${character.id}`)
                            } style={{ backgroundImage: 'url(' + character.image1 + ')' }} className='card'>
                                <h3>{character.parent_user}</h3>
                            </div>
                        </TinderCard>


                    )}
                    <br></br>
                    <br></br>
                    <br></br>
                    <br></br>
                    <br></br>
                    <br></br>
                    <br></br>
                    <br></br>
                    <br></br>
                    <br></br>
                    <br></br>
                    <br></br>
                    {g.map((character) =>


                        <TinderCard className='swipe' key={character.id} onSwipe={(dir) => this.swiped(dir, character.parent_user)} onCardLeftScreen={() => this.outOfFrame(character.parent_user)}>
                            <div onDoubleClick={() =>
                                this.props.history.push(`/main/products/${character.id}`)
                            } style={{ backgroundImage: 'url(' + character.image1 + ')' }} className='card'>
                                <h3>{character.parent_user}</h3>
                            </div>
                        </TinderCard>


                    )}
                    <br></br>
                    <br></br>
                    <br></br>
                    <br></br>
                    <br></br>
                    <br></br>
                    <br></br>
                    <br></br>
                    <br></br>
                    <br></br>
                    <br></br>
                    <br></br>
                    {f.map((character) =>


                        <TinderCard className='swipe' key={character.id} onSwipe={(dir) => this.swiped(dir, character.parent_user)} onCardLeftScreen={() => this.outOfFrame(character.parent_user)}>
                            <div onDoubleClick={() =>
                                this.props.history.push(`/main/products/${character.id}`)
                            } style={{ backgroundImage: 'url(' + character.image1 + ')' }} className='card'>
                                <h3>{character.parent_user}</h3>
                            </div>
                        </TinderCard>


                    )}
                </div>

            </div>
        )
    }

}




const mapStateToProps = state => {
    return {
        token: state.auth.token,
        username: state.auth.username
    };
};

const mapDispatchToProps = dispatch => {
    return {
        getUserChats: (username, token) =>
            dispatch(messageActions.getUserChats(username, token))
    };
};

export default withRouter(
    connect(
        mapStateToProps,
        mapDispatchToProps
    )(Sg)
);
